local Wrapper = {}

-- // サービス \\ --
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- // 変数 \\ --
local plr = Players.LocalPlayer

-- // 関数 \\ --

--position 指定したい位置(Vecter3型).
--orientation 指定したい角度(Vecter3型).
--orientationを指定しない場合、今向いている方向のままTPする.
function Wrapper:teleport_to_vector3(position, orientation)
    if plr.Character then
        if orientation == nil then
            plr.Character:PivotTo(CFrame.new(position) * CFrame.fromEulerAngles(math.rad(plr.Character.HumanoidRootPart.Rotation.X), math.rad(plr.Character.HumanoidRootPart.Rotation.Y), math.rad(plr.Character.HumanoidRootPart.Rotation.Z)))
        else
            plr.Character:PivotTo(CFrame.new(position) * CFrame.fromEulerAngles(math.rad(orientation.X), math.rad(orientation.Y), math.rad(orientation.Z)))
        end
    end
end

--player オブジェクトとして取得したいプレイヤー名(DisplayネームでもUserIdでも可).
function Wrapper:get_player_obj(playername)
    -- DisplayName もしくは UserId でターゲットプレイヤーを検索
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name == playername or player.DisplayName == playername then
            return player
        end
    end
    -- プレイヤーが見つからなかった場合はエラーを返す
    error("Player '" .. playername .. "' not found")
end

--player TP先のプレイヤー名(DisplayネームでもUserIdでも可).
function Wrapper:teleport_to_player(playername)
    if plr.Character then
        local target_player = Wrapper:get_player_obj(playername)

        -- ターゲットプレイヤーが見つかればテレポート
        if target_player.Character:FindFirstChild("HumanoidRootPart") then
            plr.Character:PivotTo(target_player.Character.HumanoidRootPart.CFrame)
        end
    end
end

return Wrapper